/*
 * @Author: dding3
 * @Date: 2024-01-17 00:39:20
 * @LastEditors: dding3
 * @LastEditTime: 2024-01-17 22:34:33
 * @Description:
 * @FilePath: /test/test/other/project/uart/src/main.cpp
 */
#include <time.h>
#include "uart.hpp"

#define UART_DEV_NAME "/dev/ttyUSB0"
#define UART_BAUDRATE 460800

static int _onDataRecv(uint8_t *data, int len)
{
    // printf("got some data len:%d\r\n", len);
    return 0;
}

static int handshake()
{
    UartDev::getInstance().registerRecvCallback(&_onDataRecv, std::placeholders::_1, std::placeholders::_2);
    if (UartDev::getInstance().openUart((char *)UART_DEV_NAME, UART_BAUDRATE) > 0)
    {
        printf("McuHal init done\r\n");
        UartDev::getInstance().startRecv();
        uint8_t handshake[] = {0xAA, 0x77, 0x01, 0xFF, 0xDF, 0xA0, 0x80, 0x00, 0x01, 0x01};
        UartDev::getInstance().sendData(handshake, sizeof(handshake));
    }
    else
    {
        printf("uart:%s open failed\r\n", UART_DEV_NAME);
        return -1;
    }
    sleep(1);
    UartDev::getInstance().stopRecv();
    UartDev::getInstance().closeUart();
    return 0;
}

static int startTest()
{
    UartDev::getInstance().registerRecvCallback(&_onDataRecv, std::placeholders::_1, std::placeholders::_2);
    if (UartDev::getInstance().openUart((char *)UART_DEV_NAME, UART_BAUDRATE) > 0)
    {
        printf("McuHal init done\r\n");
        UartDev::getInstance().startRecv();
    }
    else
    {
        printf("uart:%s open failed\r\n", UART_DEV_NAME);
        return -1;
    }

    uint8_t data[] = {0xAA,0x77,0x01,0x24,0xF9,0xB0,0x01,0x00,0x79,0x30,0x31,0x2D,0x31,0x31,0x2D,0x30,0x39,0x3A,0x35,0x34,0x3A,0x35,0x36,0x3A,0x50,0x4D,0x5F,0x49,0x4E,0x46,0x4F,0x28,0x50,0x41,0x33,0x31,0x5F,0x4D,0x43,0x55,0x5F,0x32,0x30,0x31,0x2C,0x30,0x38,0x31,0x36,0x29,0x3A,0x31,0x2C,0x30,0x78,0x31,0x2C,0x52,0x65,0x74,0x30,0x78,0x33,0x30,0x30,0x2C,0x30,0x30,0x30,0x39,0x38,0x37,0x35,0x33,0x2D,0x30,0x2C,0x30,0x2C,0x30,0x78,0x36,0x2D,0x30,0x2C,0x31,0x2C,0x31,0x2C,0x31,0x2C,0x31,0x2D,0x31,0x2C,0x30,0x2C,0x30,0x2D,0x30,0x78,0x31,0x2C,0x30,0x78,0x30,0x2C,0x32,0x2C,0x30,0x2C,0x31,0x2D,0x31,0x32,0x32,0x2C,0x33,0x2C,0x33,0x2C,0x31,0x2C,0x30,0x2C,0x30,0x2D,0x30,0x0D,0x0A,
    0xAA,0x77,0x01,0x24,0xF9,0xB0,0x01,0x00,0x79,0x30,0x31,0x2D,0x31,0x31,0x2D,0x30,0x39,0x3A,0x35,0x34,0x3A,0x35,0x36,0x3A,0x50,0x4D,0x5F,0x49,0x4E,0x46,0x4F,0x28,0x50,0x41,0x33,0x31,0x5F,0x4D,0x43,0x55,0x5F,0x32,0x30,0x31,0x2C,0x30,0x38,0x31,0x36,0x29,0x3A,0x31,0x2C,0x30,0x78,0x31,0x2C,0x52,0x65,0x74,0x30,0x78,0x33,0x30,0x30,0x2C,0x30,0x30,0x30,0x39,0x38,0x37,0x35,0x33,0x2D,0x30,0x2C,0x30,0x2C,0x30,0x78,0x36,0x2D,0x30,0x2C,0x31,0x2C,0x31,0x2C,0x31,0x2C,0x31,0x2D,0x31,0x2C,0x30,0x2C,0x30,0x2D,0x30,0x78,0x31,0x2C,0x30,0x78,0x30,0x2C,0x32,0x2C,0x30,0x2C,0x31,0x2D,0x31,0x32,0x32,0x2C,0x33,0x2C,0x33,0x2C,0x31,0x2C,0x30,0x2C,0x30,0x2D,0x30,0x0D,0x0A};

    time_t start_t, end_t;
    double diff_t;
    int count = 10000;

    printf("data len:%d\r\n", sizeof(data));
    time(&start_t);
    for (int i = 0; i < count; i++)
    {
        UartDev::getInstance().sendData(data, sizeof(data));
        // usleep(10);
    }

    time(&end_t);

    diff_t = difftime(end_t, start_t);
    printf("\r\n------------------\r\nsend_len:%d,used time:%f second,speed:%f\r\n----------------------------\r\n", count * sizeof(data), diff_t,
           (double)count * sizeof(data) / diff_t);

    sleep(1);
    UartDev::getInstance().stopRecv();
    UartDev::getInstance().closeUart();

    return 0;
}

int main(int argc, char *argv[])
{
    int c;
    while ((c = getopt(argc, argv, "ht")) != -1)
    {
        // printf("got something:%s\r\n", optarg);
        switch (c)
        {
        case 'h':
            return handshake();
        case 't':
            return startTest();
        default:
            break;
        }
    }

    return 0;
}
